---
layout: post
title: "nest js tutorial #2"
subtitle: "#2"
date: 2022-04-01 00:00:00 +0900
tag: nestjs
background: '/img/bg-post.jpg'
---

## Request parameter를 다뤄보자
api를 구성하는 동안에 우리는 base_url/search/1 형태의 id값으로 특정 정보를 찾는 경우가 있다. 이러한 경우 어떻게 url을 구성하는지, 어떻게 들어온 값을 사용하는지 알아보도록 하자.

먼저 controller에 내가 url을 어떤식으로 받을 것인지, 어떤 함수로 기능을 구현할 것인지 설정해주자

```typescript
@Get(':id')
  getCustomer(
    @Param('id', ParseIntPipe) id: number,
    @Req() req: Request,
    @Res() res: Response,
  ) {
    // console.log(typeof id);
    const customer = this.customersService.findCustomerById(id);
    if (customer) {
      res.send(customer);
    } else {
      res.status(400).send({ msg: 'Customer not found' });
    }
  }
```

위의 코드를 분석해보면 먼저 @Get()을 통해서 어떤 url로 받을 것인지 설정해준다.

@Get() 괄호 안의 값은 내가 받을 인자를 선택해주는 것인데 ':id'로 받고 있기 때문에 내가 id값을 받고있다는 것을 나타낸다.

실제로 구현되는 함수 안을 보면 @Param('id', ParseIntPipe) id: number 를 볼 수 있다.

id 값으로 넘어오는 parameter를 받겠다는 표시이며 ParseIntPipe는 parameter로 넘어오는 값이 string 형태로 넘어오기 때문에 이를 int 형태로 자동으로 바꾸고자 넣어주는 parser이다.

우리는 int 형태의 id값을 매개체로 user를 찾아줄 것이기 때문에 id를 number 형태로 받는다.

이를 구현한 service 파일을 보면, 

```typescript
@Injectable()
export class CustomersService {
  users = [
    {
      id: 1,
      email: 'senghan1992@gmail.com',
      createdAt: new Date(),
    },
    {
      id: 2,
      email: 'adam@gmail.com',
      createdAt: new Date(),
    },
    {
      id: 3,
      email: 'danny@gmail.com',
      createdAt: new Date(),
    },
  ];

  findCustomerById(id: number) {
    return this.users.find((user) => user.id == id);
  }
}

```
일단 임시 데이터 리스트를 만들어주고 데이터를 임의로 생성해준다.

실제 구현된 findCustomerById(id: number) 함수를 보면, 아까 url로 받은 id값을 넘겨 실제 user정보중 일치하는 id값을 가진 user 정보를 뱉어내게 구현되어 있다.

이렇게 해당되는 실제 로직 실행 후 해당되는 값을 return해주면 controller에서는 service에서 return 된 값을 받아서 어떻게 처리할지 결정한다.

위에 구현된 controller방법보다 조금 더 간단하고 효과적으로 구현해보자.

```typescript
@Get('/search/:id')
  searchCustomerById(@Param('id', ParseIntPipe) id: number) {
    const customer = this.customersService.findCustomerById(id);
    if (customer) return customer;
    else throw new HttpException('Customer Not Found!', HttpStatus.BAD_REQUEST);
  }
```
구현된 함수를 보면 위의 구현방식과 큰차이는 없다. 다만 service에서 넘어온 값을 가지고 처리하는 방식에 있어서 차이가 난다.

return 되는 customer값이 없다면 HttpException을 발생시켜 message를 넘겨주게 된다.

이때, 위에 구현된 방법과 다른 차이점을 살펴보자.

<img src="/img/nest_2/1.png" />

구현된 순서대로의 결과다. 밑에 간단하게 구현한 예시를 보면 statusCode도 친절하게 나와있으며, 실제 api를 구성할때 주로 사용되는 방법이라고 한다.

## Post Requests & Data Transfer Objects

POST request의 처리 방법을 알아보자.
사용방법은 그렇게 어렵지 않다 그동안 @Get() annotation을 붙여주던 것을 @Post()를 붙여주면 된다.

```typescript
@Post('create')
  createCustomer(@Body() createCustomerDto: CreateCustomerDto) {
    // console.log(createCustomerDto);
    this.customersService.createCustomer(createCustomerDto);
  }
```
위의 코드처럼 @Post 태그를 설정해주고 어떤 url로 내가 받을 것인지 설정해준다.

그러고나면 createCustomer(@Body() createCustomerDto: CreateCustomerDto) 가 보이는데, 여기서 CreateCustomerDto는 request에 넘어오는 body data를 기본 데이터 형식에 맞게 transfer해주는 역할을 하게 된다. 현재는 DB를 따로 사용하고 있지 않아서 class의 형태를 띠고 있지만 후에는 더 깊이있게 쓰일 예정이라고 한다.

```typescript
export class CreateCustomerDto {
    email: string;
    id:number;
    name:string;
}
```
위의 코드는 Dto를 예시로 짠 코드인데, 보면 항목들이 정해져있다. 이때 postman이나 다른 api를 쏴줄수 있는 tool을 이용하여 body에 Dto에 있는 key 값을 담아서 보내면 자동으로 저렇게 한번에 받을 수 있다.

기존 express app을 만들때는,
```typescript
req.body.email = this.email;
req.body.id = this.id;
```

위와 같은 방법으로 구성했었는데, 이는 굉장히 생산성 저하를 일으키는 요소중에 하나이다. 이를 통해 코드 작성 속도도 좀 더 빨라질 것이고 아무래도 수고가 좀 덜해질 수 있다.

## Validating POST Requests
들어오는 data에 대해 validation을 진행시킬수도 있다. 이때는 library를 사용해서 validate를 진행하도록 한다.

```
npm i --save class-validator class-transformer
```

위에서 작성한 Dto 코드에 body로 들어온 parameter들이 실제로 들어온 값이 제대로 들어온건지 check해주는 역할을 해준다. 원래대로라면 validation 함수들을 다 만들어서 validate해줘야하지만 library를 이용하면 annotation을 붙여주는 것만으로도 가능하다. 아주 편리 ^_____^

controller에서도 validation을 사용한다는 것을 알려주기 위해 @UsePipes(ValidationPipe) 라는 annotation을 기재해 알려준다.
```typescript
@Post('create')
  @UsePipes(ValidationPipe)
  createCustomer(@Body() createCustomerDto: CreateCustomerDto) {
    // console.log(createCustomerDto);
    this.customersService.createCustomer(createCustomerDto);
  }
```

validation은 하나만 해야하는 것은 아니다. 두개 이상도 사용이 가능하다. 예를 들면 내가 id라는 값을 숫자인지, 혹은 비어있는 값인지에 대해 validate을 한다고 하면 두가지 모두 validation annotation을 달아주면 된다.
```typescript
@IsNumberString()
    @IsNotEmpty()
    id:number;
```

Dto 파일 안에서 다른 dto파일을 받을 수도 있다. Dto는 class형태를 띄기 때문에 여러 type들이 모여있는 하나의 type으로 생각해줄 수 있다. 따라서 하나의 Dto에서 type이 새로운 class인 형태의 객체를 받을 수도 있는데 이럴 때는 새로운 dto를 생성 및 validation을 기존처럼 해주고 그 객체를 받은 dto에서 별도의 작업을 해줘야한다.

예를 들면,
```typescript
export class CreateCustomerDto {
  @IsEmail()
  email: string;

  @IsNumberString()
  @IsNotEmpty()
  id: number;

  @IsNotEmpty()
  name: string;

  @IsNotEmptyObject()
  @ValidateNested()
  @Type(() => CreateAddressDto)
  address: CreateAddressDto;
}

```
위의 코드를 보면 address라는 CreateAddressDto type의 데이터를 받고 있다. 위의 @IsNotEmptyObject()는 실제 들어온 body에 저 형태의 데이터가 들어있는지 묻는 것이고, @ValidateNested() 및 @Type(() => CreateAddressDto) 는 들어온 data의 transfer를 통해 실제 들어온 데이터를 CreateAddressDto의 validation에 맞춰서 validation을 진행하게 된다.